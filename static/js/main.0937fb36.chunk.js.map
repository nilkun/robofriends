{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","props","robot","source","concat","id","react_default","a","createElement","className","alt","src","name","email","CardList","_ref","robots","CardComponent","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","components_CounterButton","App","onRequestRobots","_this$props","searchfield","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","React","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","paylaod","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.0937fb36.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = (props) => {\n    const { robot } = props;\n    const source = `https://robohash.org/${robot.id}?200x200`;\n    return (\n        <div className='bg-orange dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='ninja' src={source} />\n            <div>\n                <h2>{robot.name}</h2>\n                <p>{robot.email}</p>\n            </div>\n        </div>\n    );\n}\n\n// class Card extends Component {\n//     render() {\n//         return(\n//             <div>test</div>\n//         )\n//     }\n// }\n\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots}) => {\n    // throw new Error(\"NOOOO!!!\");\n    const CardComponent = robots.map((user, i) => {\n        return <Card key={i} robot = {robots[i]}/>\n    })\n    return (\n        <div>\n        {CardComponent}\n        {/* <Card robot = {robots[0]}/>\n        <Card robot = {robots[1]}/>\n        <Card robot = {robots[2]}/>\n        <Card robot = {robots[3]}/>  */}\n    </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--red bg-light-gray'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    // console.log(props);\n    return (\n        <div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, {Component } from 'react';\n\nclass ErrorBoundary extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if(this.state.hasError) {\n            return <h1>Super Error Detected... Self destruction activated.</h1>\n       \n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\n\nclass CounterButton extends Component {\n    constructor() {\n        super();\n        this.state = {\n            count: 0\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(this.state.count !== nextState.count) {\n            return true\n        }\n        return false;\n    }\n\n    updateCount = () => {\n        this.setState(state => {\n            return {count: state.count + 1}\n        })\n    }\n\n    render() {\n        return (\n            <button color = {this.props.color} onClick={this.updateCount}>\n                Count: {this.state.count}\n            </button>\n        )\n    }\n}\n\nexport default CounterButton;","import React, { Component } from 'react';\n// import './Header.css'\nimport CounterButton from './CounterButton';\n\nclass Header extends Component {\n    shouldComponentUpdate(nextProps, nextState) {\n        return false;\n    }\n    render() {\n        return (\n            <div>\n                <h1>-=RoboFriends 2.0=-</h1>\n                <CounterButton color={'red'} />\n            </div>\n        )\n    }\n}\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nimport { setSearchfield, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  return {\n    searchfield: state.searchRobots.searchfield,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending, \n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchfield(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots()\n  }\n\n  render() {\n    const { searchfield, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return isPending ? <h1>Loading...</h1> :\n    (\n      <div className=\"tc\">\n        <Header />\n        <SearchBox searchChange={onSearchChange} />\n        <Scroll>\n        <ErrorBoundary>\n          <CardList robots={ filteredRobots } />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nexport const setSearchfield = (text) => ({\n    type: CHANGE_SEARCHFIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response => response.json())\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, paylaod: error}))\n}","export const CHANGE_SEARCHFIELD = 'CHANGE_SEARCHFIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCHFIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from './constants'\n\nconst initialStateSearch = {\n    searchfield: ''\n}\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action ={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCHFIELD:\n            return Object.assign({}, state, {searchfield: action.payload});\n        default:\n            return state;\n    }\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, { isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, { robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, { error: action.payload, isPending: false })\n        default:\n            return state\n    }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider, connect } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport './index.css';\nimport 'tachyons';\nimport App from './containers/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\ndocument.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}